#!/usr/bin/env python

import pysacio
import sys
import re
import time
from optparse import OptionParser

usage = "usage: %prog [options] sac_filenames ..."
parser = OptionParser(usage=usage)
parser.add_option("--reference-time", dest="reference_time",
                  choices=['epoch','sac'], 
                  default='epoch',
                  help="reference time for time column: epoch or sac, "
                       "default: %default",
                  metavar='epoch|sac')

parser.add_option("--no-header",
                  action="store_false", dest="output_header", default=True,
                  help="Prepend the output files with a header line "
                       "containing reference date and time, station and component "
                       "name.")

(options, args) = parser.parse_args()

sac_filenames = args
if not sac_filenames:
    parser.print_help()

for sac_filename in sac_filenames:
    sac_file = pysacio.SacFile(sac_filename)
    try: 
        sac_ref_time = sac_file.get_ref_time()
    except:
        sac_ref_time = 0.

    if options.reference_time == 'sac':
        out_ref_time = sac_ref_time
    else:
        out_ref_time = 0.
   
    start_time = sac_ref_time - out_ref_time + sac_file.b
    
    delta = sac_file.delta
    txt_filename = re.sub(r'\.(sac|SAC)$', '.txt', sac_filename)
    if txt_filename == sac_filename:
        txt_filename = txt_filename + '.txt'
        
    txt_file = open(txt_filename, 'w')
    if options.output_header:
        txt_file.write('# ref_date=%s, ref_time=%s, station=%s, channel=%s\n'
                            % (time.strftime('%Y-%m-%d', time.gmtime(out_ref_time)),
                               time.strftime('%H:%M:%S', time.gmtime(out_ref_time)),
                               sac_file.kstnm, sac_file.kcmpnm))

    for i, amp in enumerate(sac_file.data[0]):
        txt_file.write('%f %g\n' % (i*delta+start_time, amp) )
    
    txt_file.close()
    